import pandas as pd
from fuzzywuzzy import fuzz
import os

# File paths - UPDATE THESE
sheet1_path = r'C:\your\path\to\sheet1.xlsx'
sheet2_path = r'C:\your\path\to\sheet2.xlsx'
output_path = r'C:\your\output\path\matched_output.xlsx'

def validate_columns(df, required_cols, sheet_name):
    """Validate required columns exist in DataFrame"""
    missing = [col for col in required_cols if col not in df.columns]
    if missing:
        raise ValueError(f"Missing columns in {sheet_name}: {', '.join(missing)}")

# Read and validate sheets
try:
    sheet1 = pd.read_excel(sheet1_path)
    sheet2 = pd.read_excel(sheet2_path)
    
    # Validate Sheet1 columns
    validate_columns(sheet1, 
                   ['Id', 'Company', 'Email', 'DomainEmail', 
                    'Account_Name', 'Account_Hosp_Id_r', 'Account_Mco__Id_r'], 
                   'Sheet1')
    
    # Validate Sheet2 columns
    validate_columns(sheet2, 
                   ['Id', 'Name', 'Website', 'Website_2', 
                    'Account_Hosp_Id', 'Account_Mco__Id'], 
                   'Sheet2')

except Exception as e:
    print(f"Error reading files: {str(e)}")
    exit()

def clean_id(value):
    """Convert ID values to strings without formatting"""
    if pd.isna(value) or str(value).strip() in ['', 'nan', 'None']:
        return None
    return str(value).strip()

# Process Sheet1
sheet1['Account_Hosp_Id_r'] = sheet1['Account_Hosp_Id_r'].apply(clean_id)
sheet1['Account_Mco__Id_r'] = sheet1['Account_Mco__Id_r'].apply(clean_id)
sheet1['DomainEmail'] = sheet1['DomainEmail'].astype(str).str.lower().str.strip()

# Process Sheet2
sheet2['Account_Hosp_Id'] = sheet2['Account_Hosp_Id'].apply(clean_id)
sheet2['Account_Mco__Id'] = sheet2['Account_Mco__Id'].apply(clean_id)
sheet2['Website'] = sheet2['Website'].astype(str).str.lower().str.strip()
sheet2['Name'] = sheet2['Name'].astype(str).str.lower().str.strip()

# Initialize Match column
sheet1['Match'] = None

def get_best_match(row, sheet2, column1, column2, threshold=90):
    """Fuzzy matching with proper value return"""
    best_match = None
    best_score = 0
    
    for _, s2_row in sheet2.iterrows():
        val1 = str(getattr(row, column2, ''))
        val2 = str(s2_row[column1])
        
        if val1 in ['nan', ''] or val2 in ['nan', '']:
            continue
            
        score = fuzz.ratio(val1, val2)
        if score >= threshold and score > best_score:
            best_score = score
            best_match = s2_row[column1]  # Return actual value from Sheet2
    
    return best_match

# Main matching logic
try:
    for idx, row in sheet1.iterrows():
        # 4. Check Account_Hosp_Id first
        if row['Account_Hosp_Id_r']:
            hosp_matches = sheet2[sheet2['Account_Hosp_Id'] == row['Account_Hosp_Id_r']]
            if not hosp_matches.empty:
                sheet1.at[idx, 'Match'] = hosp_matches.iloc[0]['Account_Hosp_Id']
                continue
                
        # 5. Check Account_Mco__Id
        if row['Account_Mco__Id_r']:
            mco_matches = sheet2[sheet2['Account_Mco__Id'] == row['Account_Mco__Id_r']]
            if not mco_matches.empty:
                sheet1.at[idx, 'Match'] = mco_matches.iloc[0]['Account_Mco__Id']
                continue
                
        # 6. Check Website vs DomainEmail
        if row['DomainEmail'] not in ['nan', '']:
            website_matches = sheet2[sheet2['Website'] == row['DomainEmail']]
            if not website_matches.empty:
                sheet1.at[idx, 'Match'] = website_matches.iloc[0]['Website']
                continue
                
            # Fuzzy match if exact match not found
            website_match = get_best_match(row, sheet2, 'Website', 'DomainEmail')
            if website_match:
                sheet1.at[idx, 'Match'] = website_match
                continue
                
        # 7. Check Name vs Account_Name
        if pd.notna(row['Account_Name']) and row['Account_Name'].strip():
            name_match = get_best_match(row, sheet2, 'Name', 'Account_Name')
            if name_match:
                sheet1.at[idx, 'Match'] = name_match
                continue
                
        # 8. Check Name vs Company
        if pd.notna(row['Company']) and row['Company'].strip():
            company_match = get_best_match(row, sheet2, 'Name', 'Company')
            if company_match:
                sheet1.at[idx, 'Match'] = company_match

except Exception as e:
    print(f"Error during matching process: {str(e)}")

# Save output
os.makedirs(os.path.dirname(output_path), exist_ok=True)
sheet1.to_excel(output_path, index=False)
print(f"Processing complete. Output saved to: {output_path}")
