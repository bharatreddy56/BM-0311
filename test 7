import pandas as pd
import numpy as np
from rapidfuzz import process, fuzz
from concurrent.futures import ProcessPoolExecutor
import os

# ========== ADD THIS SECTION ========== #
# File paths configuration
INPUT_DIR = r'C:\your\input\directory'  # Update this path
OUTPUT_DIR = r'C:\your\output\directory'  # Update this path

sheet1_path = os.path.join(INPUT_DIR, 'sheet1.xlsx')
sheet2_path = os.path.join(INPUT_DIR, 'sheet2.xlsx')
output_path = os.path.join(OUTPUT_DIR, 'matched_output.xlsx')
# ======================================= #

def fuzzy_match_wrapper(args):
    return process.extractOne(args[0], args[1], scorer=fuzz.WRatio, score_cutoff=90)

def optimize_matching(sheet1, sheet2):
    # ... [rest of the optimize_matching function code] ...

def validate_columns(df, required_cols, sheet_name):
    # ... [your existing validation code] ...

# ========== ADD THIS SECTION ========== #
def main():
    # Create output directory if needed
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    
    try:
        # Read input files
        sheet1 = pd.read_excel(sheet1_path)
        sheet2 = pd.read_excel(sheet2_path)
        
        # Validate columns
        validate_columns(sheet1, ['Id', 'Company', 'Email', 'DomainEmail', 
                                'Account_Name', 'Account_Hosp_Id_r', 'Account_Mco__Id_r'], 'Sheet1')
        validate_columns(sheet2, ['Id', 'Name', 'Website', 'Website_2', 
                                'Account_Hosp_Id', 'Account_Mco__Id'], 'Sheet2')
        
        # Run optimized matching
        result = optimize_matching(sheet1, sheet2)
        
        # Save output
        result.to_excel(output_path, index=False)
        print(f"Success! Output saved to: {output_path}")
    
    except Exception as e:
        print(f"Error: {str(e)}")
        exit(1)

if __name__ == '__main__':
    main()
