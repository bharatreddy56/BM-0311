# pip install pandas rapidfuzz python-Levenshtein
import pandas as pd
from rapidfuzz import process, fuzz
import numpy as np

def optimize_matching(file_path):
    # Read data
    df1 = pd.read_excel(file_path, sheet_name='Sheet1')
    df2 = pd.read_excel(file_path, sheet_name='Sheet2')

    # Preprocess columns
    for df in [df1, df2]:
        df['Account_Hosp_Id'] = df.get('Account_Hosp_Id', df.get('Account_Hosp_Id_r', '')).astype(str).str.lower()
        df['Account_Mco__Id'] = df.get('Account_Mco__Id', df.get('Account_Mco__Id_r', '')).astype(str).str.lower()

    # Initialize output
    output = df1.copy()
    output['Match'] = np.nan
    output['Match'] = output['Match'].astype(object)

    # 1. Account_Hosp_Id matching (Exact)
    hosp_mask = df1['Account_Hosp_Id_r'].notna()
    hosp_matches = df1[hosp_mask].merge(
        df2, left_on='Account_Hosp_Id_r', right_on='Account_Hosp_Id', how='left'
    )
    output.loc[hosp_mask, 'Match'] = hosp_matches['Id_y'].values

    # 2. Account_Mco__Id matching (Exact)
    mco_mask = output['Match'].isna() & df1['Account_Mco__Id_r'].notna()
    mco_matches = df1[mco_mask].merge(
        df2, left_on='Account_Mco__Id_r', right_on='Account_Mco__Id', how='left'
    )
    output.loc[mco_mask, 'Match'] = mco_matches['Id_y'].values

    # 3. DomainEmail vs Website (Fuzzy 90%+)
    def bulk_fuzzy_match(queries, choices, threshold=90):
        return [
            (x[0] if x and x[1] >= threshold else None)
            for x in process.extract(queries, choices, scorer=fuzz.QRatio, limit=1)
        ]

    # Domain blocking strategy
    domain_mask = output['Match'].isna() & df1['DomainEmail'].notna()
    df1_domains = df1.loc[domain_mask, 'DomainEmail'].str.extract(r'@(.*)\.')[0].str.lower()
    df2_websites = df2['Website'].str.extract(r'(?:www\.)?([^.]*)\.')[0].str.lower()
    
    # Vectorized fuzzy matching with blocking
    unique_domains = df1_domains.unique()
    domain_map = {}
    for domain in unique_domains:
        if pd.notna(domain):
            domain_map[domain] = df2[df2_websites == domain]['Website'].tolist()
    
    results = []
    for domain in df1_domains:
        matches = domain_map.get(domain, [])
        results.append(bulk_fuzzy_match(domain, matches)[0] if matches else None)
    
    output.loc[domain_mask, 'Match'] = results

    # 4. Name matching (Fuzzy 90%+)
    name_mask = output['Match'].isna() & df1['Account_Name'].notna()
    name_matches = process.cdist(
        df1.loc[name_mask, 'Account_Name'].str.lower(),
        df2['Name'].str.lower(),
        scorer=fuzz.QRatio,
        dtype=np.uint8
    )
    output.loc[name_mask, 'Match'] = [
        df2.loc[np.argmax(scores), 'Name'] if np.max(scores) >= 90 else None
        for scores in name_matches
    ]

    # 5. Company matching (Fuzzy 90%+)
    comp_mask = output['Match'].isna() & df1['Company'].notna()
    comp_matches = process.cdist(
        df1.loc[comp_mask, 'Company'].str.lower(),
        df2['Name'].str.lower(),
        scorer=fuzz.QRatio,
        dtype=np.uint8
    )
    output.loc[comp_mask, 'Match'] = [
        df2.loc[np.argmax(scores), 'Name'] if np.max(scores) >= 90 else None
        for scores in comp_matches
    ]

    return output

def main():
    file_path = r'C:\bm_text.xlsx'  # Update with your path
    result = optimize_matching(file_path)
    result.to_excel('optimized_matches.xlsx', index=False)
    print("Matching complete. Output saved to optimized_matches.xlsx")

if __name__ == "__main__":
    main()
