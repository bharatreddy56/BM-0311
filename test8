import pandas as pd
from thefuzz import fuzz
from tqdm import tqdm

def fuzzy_match(sheet1_path, sheet2_path, output_path):
    # Read Excel files
    df1 = pd.read_excel(sheet1_path, dtype=str)
    df2 = pd.read_excel(sheet2_path, dtype=str)

    # Fill NaN with empty string for safe comparison
    df1 = df1.fillna('')
    df2 = df2.fillna('')

    # Prepare lookup sets for fuzzy matching
    domain_emails = df1['DomainEmail'].unique()
    account_names = df1['Account_Name'].unique()
    companies = df1['Company'].unique()

    # Prepare for fast exact matching
    hosp_id_set = set(df1['Account_Hosp_Id_r'])
    mco_id_set = set(df1['Account_Mco__Id_r'])

    # Prepare output DataFrame
    output_rows = []

    for idx, row in tqdm(df2.iterrows(), total=len(df2)):
        match_value = ''

        # 1. Account_Hosp_Id match
        if row['Account_Hosp_Id'] in hosp_id_set and row['Account_Hosp_Id']:
            match_value = row['Account_Hosp_Id']

        # 2. Account_Mco__Id match
        elif row['Account_Mco__Id'] in mco_id_set and row['Account_Mco__Id']:
            match_value = row['Account_Mco__Id']

        # 3. Website vs DomainEmail (fuzzy)
        elif row['Website']:
            for domain in domain_emails:
                if fuzz.token_sort_ratio(row['Website'], domain) >= 90:
                    match_value = row['Website']
                    break

        # 4. Name vs Account_Name (fuzzy)
        if not match_value and row['Name']:
            for name in account_names:
                if fuzz.token_sort_ratio(row['Name'], name) >= 90:
                    match_value = row['Name']
                    break

        # 5. Name vs Company (fuzzy)
        if not match_value and row['Name']:
            for company in companies:
                if fuzz.token_sort_ratio(row['Name'], company) >= 90:
                    match_value = row['Name']
                    break

        # Find corresponding values from sheet1 for output
        # (You can adjust this logic if you want to pull more info from sheet1)
        sheet1_row = df1[
            (df1['Account_Hosp_Id_r'] == row['Account_Hosp_Id']) |
            (df1['Account_Mco__Id_r'] == row['Account_Mco__Id']) |
            (df1['DomainEmail'] == row['Website']) |
            (df1['Account_Name'] == row['Name']) |
            (df1['Company'] == row['Name'])
        ]
        if not sheet1_row.empty:
            sheet1_row = sheet1_row.iloc[0]
        else:
            sheet1_row = pd.Series({col: '' for col in ['Id', 'Company', 'Email', 'DomainEmail', 'Account_Name', 'Account_Hosp_Id_r', 'Account_Mco__Id_r']})

        output_rows.append({
            'Id': sheet1_row.get('Id', ''),
            'Company': sheet1_row.get('Company', ''),
            'Email': sheet1_row.get('Email', ''),
            'DomainEmail': sheet1_row.get('DomainEmail', ''),
            'Account_Name': sheet1_row.get('Account_Name', ''),
            'Account_Hosp_Id_r': sheet1_row.get('Account_Hosp_Id_r', ''),
            'Account_Mco__Id_r': sheet1_row.get('Account_Mco__Id_r', ''),
            'Match': match_value
        })

    # Save to Excel
    output_df = pd.DataFrame(output_rows)
    output_df.to_excel(output_path, index=False)

# === UPDATE THESE PATHS TO YOUR FILE LOCATIONS ===
sheet1_path = r'C:\Users\YourUsername\Documents\sheet1.xlsx'
sheet2_path = r'C:\Users\YourUsername\Documents\sheet2.xlsx'
output_path = r'C:\Users\YourUsername\Documents\output.xlsx'

fuzzy_match(sheet1_path, sheet2_path, output_path)

