import pandas as pd
from fuzzywuzzy import fuzz
import os

# File paths - UPDATE THESE
sheet1_path = r'C:\your\path\to\sheet1.xlsx'
sheet2_path = r'C:\your\path\to\sheet2.xlsx'
output_path = r'C:\your\output\path\matched_output.xlsx'

def validate_columns(df, required_cols, sheet_name):
    """Validate required columns exist in DataFrame"""
    missing = [col for col in required_cols if col not in df.columns]
    if missing:
        raise ValueError(f"Missing columns in {sheet_name}: {', '.join(missing)}")

# Read and validate sheets
try:
    sheet1 = pd.read_excel(sheet1_path)
    sheet2 = pd.read_excel(sheet2_path)
    
    # Validate Sheet1 columns
    validate_columns(sheet1, 
                   ['Id', 'Company', 'Email', 'DomainEmail', 
                    'Account_Name', 'Account_Hosp_Id_r', 'Account_Mco__Id_r'], 
                   'Sheet1')
    
    # Validate Sheet2 columns
    validate_columns(sheet2, 
                   ['Id', 'Name', 'Website', 'Website_2', 
                    'Account_Hosp_Id', 'Account_Mco__Id'], 
                   'Sheet2')

except Exception as e:
    print(f"Error reading files: {str(e)}")
    exit()

# Convert columns to string and clean data
def safe_convert(df, col):
    return df[col].astype(str).str.lower().str.strip()

sheet1['Account_Hosp_Id_r'] = safe_convert(sheet1, 'Account_Hosp_Id_r')
sheet1['Account_Mco__Id_r'] = safe_convert(sheet1, 'Account_Mco__Id_r')
sheet1['DomainEmail'] = safe_convert(sheet1, 'DomainEmail')
sheet1['Account_Name'] = safe_convert(sheet1, 'Account_Name')
sheet1['Company'] = safe_convert(sheet1, 'Company')

sheet2['Account_Hosp_Id'] = safe_convert(sheet2, 'Account_Hosp_Id')
sheet2['Account_Mco__Id'] = safe_convert(sheet2, 'Account_Mco__Id')
sheet2['Website'] = safe_convert(sheet2, 'Website')
sheet2['Name'] = safe_convert(sheet2, 'Name')

def get_best_match(row, sheet2, match_type, threshold=90):
    """Fuzzy matching with match type specification"""
    best_match = None
    best_score = 0
    
    for _, s2_row in sheet2.iterrows():
        if match_type == 'website':
            score = fuzz.ratio(row['DomainEmail'], s2_row['Website'])
        elif match_type == 'account_name':
            score = fuzz.ratio(row['Account_Name'], s2_row['Name'])
        elif match_type == 'company':
            score = fuzz.ratio(row['Company'], s2_row['Name'])
        
        if score >= threshold and score > best_score:
            best_score = score
            best_match = s2_row[match_type.split('_')[0]]  # Returns website/name based on match type
    
    return best_match

# Main matching logic
for idx, row in sheet1.iterrows():
    match_value = None
    
    # 4. Check Account_Hosp_Id first
    if row['Account_Hosp_Id_r'] != 'nan':
        hosp_matches = sheet2[sheet2['Account_Hosp_Id'] == row['Account_Hosp_Id_r']]
        if not hosp_matches.empty:
            match_value = hosp_matches.iloc[0]['Account_Hosp_Id']
    
    # 5. Check Account_Mco__Id if no previous match
    if not match_value and row['Account_Mco__Id_r'] != 'nan':
        mco_matches = sheet2[sheet2['Account_Mco__Id'] == row['Account_Mco__Id_r']]
        if not mco_matches.empty:
            match_value = mco_matches.iloc[0]['Account_Mco__Id']
    
    # 6. Check Website vs DomainEmail with fuzzy matching
    if not match_value and row['DomainEmail'] != 'nan':
        match_value = get_best_match(row, sheet2, 'website')
    
    # 7. Check Name vs Account_Name with fuzzy matching
    if not match_value and row['Account_Name'] != 'nan':
        match_value = get_best_match(row, sheet2, 'account_name')
    
    # 8. Check Name vs Company with fuzzy matching
    if not match_value and row['Company'] != 'nan':
        match_value = get_best_match(row, sheet2, 'company')
    
    sheet1.at[idx, 'Match'] = match_value

# Save output
os.makedirs(os.path.dirname(output_path), exist_ok=True)
sheet1.to_excel(output_path, index=False)
print(f"Processing complete. Output saved to: {output_path}")
